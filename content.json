[{"title":"LG1401","date":"2019-03-10T15:14:23.000Z","path":"/posts/undefined/","text":"&#x7F51;&#x8DEF;&#x6D41;&#x4E3A;&#x5565;&#x8981;&#x4E8C;&#x5206;&#xFF1F;&#xFF1F;&#xFF1F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x8FB9;&#x6309;&#x8FB9;&#x6743;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x4ECE;1&#x5F00;&#x59CB;&#x679A;&#x4E3E;&#x9A8C;&#x8BC1;&#x3002;&#x6B64;&#x5904;&#x5C31;&#x4E0D;&#x8BB2;&#x600E;&#x4E48;&#x5EFA;&#x56FE;&#x4E86;&#xFF0C;&#xFF08;&#x5C06;&#x5BB9;&#x91CF;&#x8BBE;&#x4E3A;&#x4E00;&#x5373;&#x53EF;&#xFF09; &#x95EE;&#x9898;&#x6765;&#x4E86;&#xFF1A;&#x6B64;&#x65F6;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(nm^2)$? &#x9519;&#x4E86;&#x6211;&#x4EEC;&#x4E0D;&#x5FC5;&#x91CD;&#x65B0;&#x5EFA;&#x56FE;&#xFF0C;&#x7136;&#x540E;&#x91CD;&#x65B0;&#x8DD1;dinic&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x4E0A;&#x4E00;&#x6B21;dinic&#x6240;&#x5269;&#x4E0B;&#x7684;&#x6B8B;&#x4F59;&#x7F51;&#x7EDC;&#x5728;&#x91CC;&#x9762;&#x52A0;&#x65B0;&#x589E;&#x7684;&#x8FB9;&#xFF0C;&#x76F4;&#x63A5;&#x8DD1;dinic&#xFF0C;&#x6C42;&#x51FA;&#x65B0;&#x589E;&#x7684;&#x8DEF;&#x5F84;&#x4E2A;&#x6570;&#x95EE;&#x9898;&#x5C31;&#x89E3;&#x51B3;&#x4E86;&#x3002;&#x3002;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;&#xFF1A;$O(nm)$ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;bits/stdc++.h&gt;using namespace std;const int N=2e5+5;int fi[N],ne[N],to[N],w[N],tot=1;inline void add(int x,int y,int z){ne[++tot]=fi[x];to[tot]=y;w[tot]=z;fi[x]=tot;}inline void ad(int x,int y,int z){add(x,y,z);add(y,x,z);}int dis[N],s,t;bool bfs(){ memset(dis,0,sizeof(dis)); queue&lt;int&gt;q; q.push(s); dis[s]=1; while(!q.empty()) { int x=q.front();q.pop(); for(int i=fi[x];i;i=ne[i]) { int y=to[i]; if(w[i]&amp;&amp;!dis[y]) { dis[y]=dis[x]+1; if(y==t)return 1; q.push(y); } } } return 0;}int dfs(int x,int flow){ if(x==t||flow==0)return flow; int res=0,u; for(int i=fi[x];i;i=ne[i]) { int y=to[i]; if(dis[y]==dis[x]+1) { u=dfs(y,min(flow,w[i])); res+=u;flow-=u;w[i]-=u;w[i^1]+u; if(!flow)break; } } if(flow)dis[x]=-1; return res;}int dinic(){ int mf=0,x; while(bfs()) while(x=dfs(s,INT_MAX)) mf+=x; return mf;}struct edge{ int x,y,z;}e[N];bool cmp(edge x,edge y){return x.z&lt;y.z;}int n,m,T;int main(){ scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;T); s=1;t=n; int now=1; for(int i=1;i&lt;=m;i++) scanf(&quot;%d%d%d&quot;,&amp;e[i].x,&amp;e[i].y,&amp;e[i].z); sort(e+1,e+m+1,cmp); for(int i=1;;i++) { for(;now&lt;=m&amp;&amp;e[now].z&lt;=i;now++) ad(e[now].x,e[now].y,1); T-=dinic(); if(T&lt;=0) { printf(&quot;%d\\n&quot;,i); return 0; } } return 0;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","updated":"2019-03-11T13:47:19.400Z","comments":true,"link":"","excerpt":"","categories":[{"name":"Luogu","slug":"Luogu","permalink":"http://tomotoes.com/categories/Luogu/"}],"tags":[{"name":"网络流","slug":"网络流","permalink":"http://tomotoes.com/tags/网络流/"},{"name":"残余网络","slug":"残余网络","permalink":"http://tomotoes.com/tags/残余网络/"},{"name":"模板","slug":"模板","permalink":"http://tomotoes.com/tags/模板/"}]},{"title":"LG4899","date":"2019-03-10T15:11:16.000Z","path":"/posts/undefined/","text":"&#x8FD9;&#x9053;&#x9898;&#x4E09;&#x4E2A;&#x7528;&#x4E3B;&#x5E2D;&#x6811;&#x7684;&#x7406;&#x7531;&#xFF1A; &#x89E3;&#x9898;&#x9700;&#x6C42; &#xFF08;&#x5E9F;&#x8BDD;&#xFF09; &#x590D;&#x6742;&#x5EA6;&#x5C0F; $O(nlogn)$ &#x5F3A;&#x5236;&#x5728;&#x7EBF; Step1&#xFF1A;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5148;kruskal&#x91CD;&#x6784;&#x4E24;&#x68F5;&#x6811;&#xFF1A;A&#x6811;&#x975E;&#x6839;&#x8282;&#x70B9;&#x5927;&#x4E8E;&#x7236;&#x8282;&#x70B9;&#xFF0C;BB&#x6811;&#x975E;&#x6839;&#x8282;&#x70B9;&#x5C0F;&#x4E8E;&#x7236;&#x8282;&#x70B9;&#x3002;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x8FD9;&#x4E24;&#x68F5;&#x6811;&#x6709;&#x4E00;&#x4E2A;&#x6027;&#x8D28;&#xFF1A;&#x4E00;&#x4E2A;&#x5B50;&#x6811;&#x5185;&#x4EFB;&#x610F;&#x8282;&#x70B9;&#x53EF;&#x4EE5;&#x4EC5;&#x901A;&#x8FC7;&#x5B50;&#x6811;&#x5185;&#x7684;&#x8282;&#x70B9;&#x5230;&#x8FBE;&#x5B50;&#x6811;&#x5185;&#x7684;&#x4EFB;&#x610F;&#x8282;&#x70B9;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B50;&#x6811;&#x90FD;&#x662F;&#x8054;&#x901A;&#x7684;&#x4E14;&#x7F16;&#x53F7;&#x6EE1;&#x8DB3;&#x5806;&#x7684;&#x6027;&#x8D28;&#x3002;&#x90A3;&#x4E48;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x73B0;&#x5728;A&#x6811;&#x4E2D;&#x627E;&#x5230;$S$&#xFF0C;&#x500D;&#x589E;&#x8DF3;&#x5230;$X$,&#x4F7F;$X&gt;=L,Fa_X&lt;L$&#x5219;$S$&#x53EF;&#x4EE5;&#x53EA;&#x901A;&#x8FC7;&#x7F16;&#x53F7;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;$L$&#x7684;&#x70B9;&#x6240;&#x80FD;&#x5230;&#x7684;&#x70B9;&#x7684;&#x96C6;&#x5408;&#x662F;$X$&#x7684;&#x5B50;&#x6811;&#x5185;&#x6240;&#x6709;&#x70B9;&#x7684;&#x96C6;&#x5408;,&#x4EE4;&#x4E3A;$Vs$&#x3002;&#x540C;&#x7406;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x5230;$T$&#x53EA;&#x7ECF;&#x8FC7;&#x7F16;&#x53F7;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;$R$&#x7684;&#x70B9;&#x6240;&#x80FD;&#x5230;&#x7684;&#x70B9;&#x7684;&#x96C6;&#x5408;$Vt$&#x3002;&#x6C42;&#x662F;&#x5426;&#x6709;&#x89E3;&#x5373;&#x4E3A;&#x8FD9;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x662F;&#x5426;&#x516C;&#x5171;&#x70B9;&#x3002; Step2&#xFF1A;&#x5206;&#x522B;&#x5904;&#x7406;&#x51FA;A&#x6811;&#x548C;B&#x6811;&#x7684;dfs&#x5E8F;&#xFF1A;dfa,dfb.$Vs$&#x7684;dfa&#x5728;$dfa_X$~$dfa_X+siz_X-1$$Vt$&#x7684;dfb&#x5728;$dfb_Y$~$dfa_Y+siz_Y-1$&#x5EFA;&#x7ACB;&#x7ED3;&#x6784;&#x4F53;&#xFF0C;&#x6309;dfa&#x6392;&#x5E8F;&#xFF0C;&#x4EE5;dfb&#x4E3A;&#x6743;&#x503C;&#x5EFA;&#x7ACB;&#x4E3B;&#x5E2D;&#x6811;&#x67E5;&#x8BE2;$dfa_X$~$dfa_X+siz_X-1$&#x7684;&#x4E3B;&#x5E2D;&#x6811;&#x4E2D;&#x503C;&#x5728;$dfb_Y$~$dfa_Y+siz_Y-1$&#x4E4B;&#x95F4;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x82E5;&#x4E3A;0&#x5219;&#x8F93;&#x51FA;0&#xFF0C;&#x5426;&#x5219;&#x8F93;&#x51FA;1.&#x89E3;&#x6BD5;&#x3002; Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#include&lt;bits/stdc++.h&gt;using namespace std;const int N=8e5+5;const int T=N&lt;&lt;4;int n,m,q,fi[N],ne[N],to[N],tot;int dfa[N],dfb[N],sia[N],sib[N];void add(int x,int y){ne[++tot]=fi[x];to[tot]=y;fi[x]=tot;}void ad(int x,int y){add(x,y);add(y,x);}struct kruskal{ int type,fk[N],nk[N],tk[N],tok; int fa[N],jp[N][20],rt,dfn[N],cnt,siz[N]; void adk(int x,int y){nk[++tok]=fk[x];tk[tok]=y;fk[x]=tok;} int fd(int x) { if(x!=fa[x])fa[x]=fd(fa[x]); return fa[x]; } void dfs(int x) { dfn[x]=++cnt;siz[x]=1; for(int i=fk[x];i;i=nk[i]) { int y=tk[i]; jp[y][0]=x; dfs(y); siz[x]+=siz[y]; } } void build() { for(int i=1;i&lt;=n;i++)fa[i]=i; if(type==1) for(int x=n;x;x--) for(int i=fi[x];i;i=ne[i]) { int y=to[i]; if(y&gt;x) { int fx=fd(x),fy=fd(y); if(fx==fy)continue; fa[fy]=fx; adk(fx,fy); } } else for(int x=1;x&lt;=n;x++) for(int i=fi[x];i;i=ne[i]) { int y=to[i]; if(y&lt;x) { int fx=fd(x),fy=fd(y); if(fx==fy)continue; fa[fy]=fx; adk(fx,fy); } } cnt=0; rt=fd(1); dfs(rt); for(int j=1;j&lt;=18;j++) for(int i=1;i&lt;=n;i++) jp[i][j]=jp[jp[i][j-1]][j-1]; } int lca(int x,int y) { for(int i=18;i&gt;=0;i--) { if(type==1) { if(jp[x][i]&gt;=y) x=jp[x][i]; } else { if(jp[x][i]&lt;=y &amp;&amp; jp[x][i]) x=jp[x][i]; } } return x; }}A,B;struct DFN{ int a,b;}ss[N];bool cmp(DFN x,DFN y){return x.a&lt;y.a;}int ls[T],rs[T],tr[T],rt[N],t_cnt;void build(int pre,int &amp;now,int l,int r,int x){ now=++t_cnt;tr[now]=tr[pre]+1; if(l==r)return ; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid) { rs[now]=rs[pre]; build(ls[pre],ls[now],l,mid,x); } else { ls[now]=ls[pre]; build(rs[pre],rs[now],mid+1,r,x); } return ;}int query(int now1,int now2,int l,int r,int L,int R){ if(L&lt;=l &amp;&amp; R&gt;=r) return tr[now2]-tr[now1]; int mid=(l+r)&gt;&gt;1,anss=0; if(L&lt;=mid)anss+=query(ls[now1],ls[now2],l,mid,L,R); if(R&gt;mid)anss+=query(rs[now1],rs[now2],mid+1,r,L,R); return anss;}int main(){ scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;q); int x,y,z,v; for(int i=1;i&lt;=m;i++) { scanf(&quot;%d%d&quot;,&amp;x,&amp;y); ad(x+1,y+1); } A.type=1; A.build(); B.type=0; B.build(); for(int i=1;i&lt;=n;i++) { dfa[i]=A.dfn[i];sia[i]=A.siz[i]; dfb[i]=B.dfn[i];sib[i]=B.siz[i]; ss[i].a=dfa[i]; ss[i].b=dfb[i]; } sort(ss+1,ss+n+1,cmp); for(int i=1;i&lt;=n;i++) build(rt[i-1],rt[i],1,n,ss[i].b); for(int i=1;i&lt;=q;i++) { scanf(&quot;%d%d%d%d&quot;,&amp;x,&amp;y,&amp;z,&amp;v); x++;y++;z++;v++; x=A.lca(x,z); y=B.lca(y,v); if(query(rt[dfa[x]-1],rt[dfa[x]+sia[x]-1],1,n,dfb[y],dfb[y]+sib[y]-1)) puts(&quot;1&quot;); else puts(&quot;0&quot;); } return 0;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","updated":"2019-03-11T13:13:20.919Z","comments":true,"link":"","excerpt":"","categories":[{"name":"Luogu","slug":"Luogu","permalink":"http://tomotoes.com/categories/Luogu/"}],"tags":[{"name":"kruskal","slug":"kruskal","permalink":"http://tomotoes.com/tags/kruskal/"},{"name":"线段树","slug":"线段树","permalink":"http://tomotoes.com/tags/线段树/"},{"name":"dfs序","slug":"dfs序","permalink":"http://tomotoes.com/tags/dfs序/"}]}]